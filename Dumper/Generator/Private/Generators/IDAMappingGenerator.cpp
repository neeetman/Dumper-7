
#include <fstream>

#include "Generators/IDAMappingGenerator.h"


std::string IDAMappingGenerator::MangleFunctionName(const std::string& ClassName, const std::string& FunctionName)
{
	return "_ZN" + std::to_string(ClassName.length()) + ClassName + std::to_string(FunctionName.length() + 4) + "exec" + FunctionName + "Ev";
}

void IDAMappingGenerator::WriteReadMe(StreamType& ReadMe)
{
	ReadMe << R"(
/*
* File generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

Supported: IDA 7.7 and above (including IDA 8.3)

'.idmap' files can be used to import the names of VFTables and Exec functions, with the following plugin:

https://github.com/Fischsalat/IDAExecFunctionsImporter


FileFormat:

An '.idmap' file is just an array of Identifiers. All the plugin does is give variables/functions at a certain offset a certain name.

struct Identifier
{
    uint32 Offset; // Relative to Imagebase
    uint16 NameLength;
    const char Name[NameLength]; // Not NULL-terminated
};
)";
}

void IDAMappingGenerator::GenerateVTableName(StreamType& IdmapFile, UEObject DefaultObject)
{
	UEClass Class = DefaultObject.GetClass();
	UEClass Super = Class.GetSuper().Cast<UEClass>();

	if (Super && DefaultObject.GetVft() == Super.GetDefaultObject().GetVft())
		return;

	std::string Name = Class.GetCppName() + "_VFT";

	uint32 Offset = static_cast<uint32>(GetOffset(DefaultObject.GetVft()));
	uint16 NameLen = static_cast<uint16>(Name.length());

	WriteToStream(IdmapFile, Offset);
	WriteToStream(IdmapFile, NameLen);
	WriteToStream(IdmapFile, Name.c_str(), NameLen);
}

void IDAMappingGenerator::GenerateClassFunctions(StreamType& IdmapFile, UEClass Class)
{
	static std::unordered_map<uint32, std::string> Funcs;

	for (UEFunction Func : Class.GetFunctions())
	{
		if (!Func.HasFlags(EFunctionFlags::Native))
			continue;

		std::string MangledName = MangleFunctionName(Class.GetCppName(), Func.GetValidName());

		uint32 Offset = static_cast<uint32>(GetOffset(Func.GetExecFunction()));
		uint16 NameLen = static_cast<uint16>(MangledName.length());

		auto [It, bInseted] = Funcs.emplace(Offset, Func.GetFullName());

		if (!bInseted)
		{
			//std::cout << "Collision: \nOld: " << It->second << "\nNew: " << Func.GetFullName() << "\n" << std::endl;
			continue;
		}

		WriteToStream(IdmapFile, Offset);
		WriteToStream(IdmapFile, NameLen);
		WriteToStream(IdmapFile, MangledName.c_str(), NameLen);
	}
}

void IDAMappingGenerator::Generate()
{
	std::string IdaMappingFileName = (Settings::Generator::GameVersion + '-' + Settings::Generator::GameName + ".idmap");

	FileNameHelper::MakeValidFileName(IdaMappingFileName);

	/* Open the stream as binary data, else ofstream will add \r after numbers that can be interpreted as \n. */
	std::ofstream IdmapFile(MainFolder / IdaMappingFileName, std::ios::binary);

	/* Create a ReadMe to describe what '.idmap' is, and how to use it */
	std::ofstream ReadMe(MainFolder / "ReadMe.txt");

	/* Write description of the file format, as well as a link to the IDA-Plugin */
	WriteReadMe(ReadMe);

	for (UEObject Obj : ObjectArray())
	{
		if (Obj.HasAnyFlags(EObjectFlags::ClassDefaultObject))
		{
			/* Gets the VTable offset from the default object and writes the ClassName + "_VFT" postfix to the file */
			GenerateVTableName(IdmapFile, Obj);
		}
		else if (Obj.IsA(EClassCastFlags::Class))
		{
			/* Iterates all of the functions of the class and them to the stream with an "exec" prefix in front of the function name */
			GenerateClassFunctions(IdmapFile, Obj.Cast<UEClass>());
		}
	}
}